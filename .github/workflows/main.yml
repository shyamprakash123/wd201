name: CI-CD Pipeline
on: push
env:
  PG_DATABASE: ${{ secrets.PG_DATABASE }}
  PG_USER: ${{ secrets.PG_USER }}
  PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
jobs:
  # Label of the container job
  run-tests:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11.7
        # Provide the password for postgres
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PG_DATABASE }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      - name: Install dependencies
        run: cd My-sports-schedular && npm ci

      # Runs the unit tests
      - name: Run unit tests
        run: cd My-sports-schedular && npm tes

      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
          author_name: GitHub Actions
          steps: ${{toJson(steps)}}
          title: ${{ job.status }} ${{ github.repository }}
          fields: Repo ${{ github.repository }}
          color: ${{ job.status == 'success' && 'good' || 'danger' }}
          channel: "My Sports Schedular Github Actions"
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Success
        if: success()
        run: |
          MESSAGE='üéâ Great news! Your tests was successful! üöÄ'
          PAYLOAD="{\"text\":\"$MESSAGE\"}"
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK }}"

      - name: Notify Failure
        if: failure()
        run: |
          FAILURE_MESSAGE='‚ö†Ô∏è Oh no! The tests has failed! ‚ùå'
          FAILURE_PAYLOAD="{\"text\":\"$FAILURE_MESSAGE\"}"
          curl -X POST -H 'Content-type: application/json' --data "$FAILURE_PAYLOAD" "${{ secrets.SLACK_WEBHOOK }}"

  # Deployment steps in CI-CD Pipeline
  deploy:
    name: Deploy to render (production)
    needs: run-tests
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to render (production)
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
          author_name: GitHub Actions
          steps: ${{toJson(steps)}}
          title: ${{ job.status }} ${{ github.repository }}
          fields: Repo ${{ github.repository }}
          color: ${{ job.status == 'success' && 'good' || 'danger' }}
          channel: "My Sports Schedular Github Actions"
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify Success
        if: success()
        run: |
          MESSAGE='üéâ Great news! Your deploy was successful! üöÄ'
          PAYLOAD="{\"text\":\"$MESSAGE\"}"
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "${{ secrets.SLACK_WEBHOOK }}"

      - name: Notify Failure
        if: failure()
        run: |
          FAILURE_MESSAGE='‚ö†Ô∏è Oh no! The deploy has failed! ‚ùå'
          FAILURE_PAYLOAD="{\"text\":\"$FAILURE_MESSAGE\"}"
          curl -X POST -H 'Content-type: application/json' --data "$FAILURE_PAYLOAD" "${{ secrets.SLACK_WEBHOOK }}"
