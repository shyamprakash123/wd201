name: Auto test L10 solution
on: push
env:
  PG_DATABASE: sports-schedular
  PG_USER: postgres
  PG_PASSWORD: shyam@1234
jobs:
  # Label of the container job
  run-tests:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11.7
        # Provide the password for postgres
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PG_DATABASE }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      - name: Install dependencies
        run: cd My-sports-schedular && npm ci

      # Runs the unit tests
      - name: Run unit tests
        run: cd My-sports-schedular && npm test

      # Builds the app
      - name: Run the app
        id: run-app
        run: |
          cd My-sports-schedular
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 npm start &
          sleep 5

  # Deployment steps in CI-CD Pipeline
  deploy:
    name: Deploy to render (production)
    needs: run-tests
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to render (production)
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
